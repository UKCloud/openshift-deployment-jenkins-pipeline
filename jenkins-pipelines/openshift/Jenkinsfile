node ('openstack-jenkins-slave') {

    def openshiftHeatBranch = 'bugfix/bastion_memory_increase'
    def openshiftDeploymentAnsibleBranch = 'bugfix/haproxy_timeout_changes'

    stage('code-checkout') {
        git branch:"$openshiftHeatBranch", url:"https://github.com/UKCloud/openshift-heat.git"
    }

    stage('setup OpenStack credentials') {
        sh "echo export OS_PASSWORD=`oc get secrets openstack --template='{{ .data.password }}' | base64 --decode` | tee -a openstack_rc.sh"
        sh "echo export OS_USERNAME=`oc get secrets openstack --template='{{ .data.username }}' | base64 --decode` | tee -a openstack_rc.sh"
        sh "echo -e \"parameter_defaults:\\n  rhn_orgid: `oc get secrets rhelsubscriptions --template='{{ .data.rhel_org }}' | base64 --decode`\" | tee rhel_reg_creds.yaml"
        sh "echo -e \"  rhn_activationkey: `oc get secrets rhelsubscriptions --template='{{ .data.rhel_activation_key }}' | base64 --decode`\" | tee -a rhel_reg_creds.yaml"
        sh "echo export OS_TENANT_ID=`oc get configmap openstack-config --template='{{ .data.openstack_project_id }}'` | tee -a openstack_rc.sh"
        sh "echo export OS_TENANT_NAME=`oc get configmap openstack-config --template='{{ .data.openstack_project_name }}'` | tee -a openstack_rc.sh"
        sh "echo export OS_AUTH_URL=`oc get configmap openstack-config --template='{{ .data.openstack_url }}'` | tee -a openstack_rc.sh"
        sh "echo export S3_ACCESS_KEY=`oc get secrets s3parameters --template='{{ .data.s3accesskey }}' | base64 --decode` | tee -a openstack_rc.sh"
        sh "echo export S3_SECRET_KEY=`oc get secrets s3parameters --template='{{ .data.s3secretkey }}' | base64 --decode` | tee -a openstack_rc.sh"
        sh "echo export S3_REGION_ENDPOINT=`oc get secrets s3parameters --template='{{ .data.s3regionendpoint }}' | base64 --decode` | tee -a openstack_rc.sh"
        sh "echo export S3_BUCKET_NAME=`oc get secrets s3parameters --template='{{ .data.s3bucketname }}' | base64 --decode` | tee -a openstack_rc.sh"
        sh "echo export OPENSHIFT_USERNAME=`oc get secrets openshift --template='{{ .data.username }}' | base64 --decode` | tee -a openstack_rc.sh"
        sh "echo export OPENSHIFT_PASSWORD=`oc get secrets openshift --template='{{ .data.userpass }}' | base64 --decode` | tee -a openstack_rc.sh"
        sh "echo export ADMIN_USERNAME=`oc get secrets openshift --template='{{ .data.adminuser }}' | base64 --decode` | tee -a openstack_rc.sh"
        sh "echo export ADMIN_PASSWORD=`oc get secrets openshift --template='{{ .data.adminpass }}' | base64 --decode` | tee -a openstack_rc.sh"
        sh "echo export DOMAIN_SUFFIX=`oc get secrets openshift --template='{{ .data.domainsuffix }}' | base64 --decode` | tee -a openstack_rc.sh"
        sh "echo export HAPROXY_FLOATING_IP=`oc get secrets openshift --template='{{ .data.haproxy_floating_ip }}' | base64 --decode` | tee -a openstack_rc.sh"
    }

    stage('cleanup HEAT environment') {
        sh 'source ./openstack_rc.sh ; openstack stack show openshift-\$OS_TENANT_NAME && openstack stack delete openshift-\$OS_TENANT_NAME --wait --yes || echo stack not found'
    }

    stage('setup host keys') {
        sh 'source ./openstack_rc.sh ; openstack keypair delete jenkins ; openstack keypair create jenkins | tee -a id_rsa_jenkins'
        sh("chmod 600 id_rsa_jenkins")
    }

    stage('setup HEAT environment') {
        sh('source ./openstack_rc.sh ; echo -e "parameter_defaults:\n  key_name: jenkins\n  domain_suffix: \$DOMAIN_SUFFIX\n  openshift_openstack_username: \$OS_USERNAME\n  s3_region_endpoint: \$S3_REGION_ENDPOINT\n  s3_access_key: \$S3_ACCESS_KEY\n  s3_secret_key: \$S3_SECRET_KEY\n  s3_bucket_name: \$S3_BUCKET_NAME\n  setupMonitoring: true\n  haproxy_floating_ip: \$HAPROXY_FLOATING_IP" > environment.yaml')
        sh('cat environment.yaml')
        sh("source ./openstack_rc.sh ; ./deploy.sh \$OS_PASSWORD")
    }

    stage('Set variables HEAT deployment') {
        sh("""
            source ./openstack_rc.sh;
            openstack stack output show openshift-\$OS_TENANT_NAME bastion_ip -f value -c output_value > env.vars
        """)
    }

    def bastionip = readFile("env.vars").trim()

    stage('Test HEAT deployment') {
        sh("echo BASTION IP = ${bastionip}")
        sh("ssh -o StrictHostKeyChecking=no -i id_rsa_jenkins cloud-user@$bastionip 'uname -a'")
    }

    stage('checkout openshift deployment code') {
        /*
           openshift-deplyment-ansible is cloned on the Bastion Host via
           HEAT, so we don't need to clone it here
        */
        sh("scp -o StrictHostKeyChecking=no -i id_rsa_jenkins id_rsa_jenkins cloud-user@$bastionip:")
        sh("ssh -o StrictHostKeyChecking=no -i id_rsa_jenkins cloud-user@$bastionip 'chmod 600 id_rsa_jenkins'")
        sh("ssh -o StrictHostKeyChecking=no -i id_rsa_jenkins cloud-user@$bastionip 'cd /usr/share/ansible/openshift-deployment-ansible ; git checkout $openshiftDeploymentAnsibleBranch'")
    }

    stage('deploy openshift') {
        sh("""
            source ./openstack_rc.sh;
            ssh -o StrictHostKeyChecking=no -i id_rsa_jenkins cloud-user@$bastionip "cd /usr/share/ansible/openshift-deployment-ansible ; ./deploy-openshift.sh \"\$ADMIN_USERNAME\" \"\$ADMIN_PASSWORD\" \"\$OPENSHIFT_USERNAME\" \"\$OPENSHIFT_PASSWORD\""
        """)
    }

    /*
        The environment variables set by the pipeline need to be overwritten.
        The kubernetes parts of the pipeline automatically override the target
        host, so therefore need to unset them so you can deploy pods within
        the correct environment.
    */
    stage('validate openshift deployment') {
        sh("""
            source ./openstack_rc.sh;
            git clone -b $openshiftDeploymentAnsibleBranch \
                https://github.com/UKCloud/openshift-deployment-ansible.git openshift-deployment-ansible

            for var in \$(env | grep KUB | cut -d= -f1); do
                unset \$var;
            done;

            ansible-playbook ./openshift-deployment-ansible/tests/all.yml \
                --extra-vars OPENSHIFT_USERNAME=\"\$OPENSHIFT_USERNAME\" \
                --extra-vars OPENSHIFT_PASSWORD=\"\$OPENSHIFT_PASSWORD\" \
                --extra-vars server=\"https://ocp.\$DOMAIN_SUFFIX:8443\"
	    ./openshift-deployment-ansible/tests/haproxy/master-failover-test.sh
        """)
    }

    /*
        Test user creation works (using a randomly-generated password)
    */
    stage('validate openshift user creation') {
        sh("""
            source ./openstack_rc.sh;
            RANDOM_PASSWORD=\$(openssl rand -base64 20 | cut -d= -f1);

            ssh -o StrictHostKeyChecking=no -i id_rsa_jenkins cloud-user@$bastionip \
                "cd /usr/share/ansible/openshift-deployment-ansible/tools/ ; ./create-user.sh testUser \$RANDOM_PASSWORD"

            ssh -o StrictHostKeyChecking=no -i id_rsa_jenkins cloud-user@$bastionip \
                "oc login https://ocp.\$DOMAIN_SUFFIX:8443 --insecure-skip-tls-verify=true -u testUser -p \$RANDOM_PASSWORD"
        """)
    }
}
